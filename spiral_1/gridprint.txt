typedef enum { NoBlock, Grass, Water, Highway, WinBlock } background;
#define c_NoBlock 	0xffff
#define c_Grass		0x0f00
#define c_Water		0x00f0
#define c_Highway	??
#define c_WinBlock	0x0f10

#define gridx 10
#define gridy 16


void printgrid(){
	int i,j = 0;

	for (i=0;i<gridx;i++){
		for (j=1;j<gridy;j++){
			if 		(g[i][j] == Noblock)
				alt_up_pixel_buffer_dma_draw_box(pixel_buffer, (320/gridx)*(i), (240/gridy)*(j), (320/gridx)*(i+1), (240/gridy)*(j+1), c_Noblock, 0);
			else if (g[i][j] == Grass)
				alt_up_pixel_buffer_dma_draw_box(pixel_buffer, (320/gridx)*(i), (240/gridy)*(j), (320/gridx)*(i+1), (240/gridy)*(j+1), c_Grass, 0);
			else if (g[i][j] == Water)
				alt_up_pixel_buffer_dma_draw_box(pixel_buffer, (320/gridx)*(i), (240/gridy)*(j), (320/gridx)*(i+1), (240/gridy)*(j+1), c_Water, 0);
			else if (g[i][j] == Highway)
				alt_up_pixel_buffer_dma_draw_box(pixel_buffer, (320/gridx)*(i), (240/gridy)*(j), (320/gridx)*(i+1), (240/gridy)*(j+1), c_Highway, 0);
			else  //(g[i][j] == WinBlock)
				alt_up_pixel_buffer_dma_draw_box(pixel_buffer, (320/gridx)*(i), (240/gridy)*(j), (320/gridx)*(i+1), (240/gridy)*(j+1), c_WinBlock, 0);

		}
	}
}